<?php

/**
 * @file
 * Unit tests for the short_answer Module.
 */

/**
 * Test class for short answer.
 */
class ShortAnswerUnitTest extends QuizQuestionTestCase {

  var $question_node_type = 'short_answer';

  public static function getInfo() {
    return array(
      'name' => t('Short answer'),
      'description' => t('Unit test for Short answers question type.'),
      'group' => t('Quiz'),
    );
  }

  function setUp() {
    parent::setUp(array('short_answer'), array('score any quiz'));
  }

  /**
   * Test case insensitive graded questions.
   */
  public function testGradeAnswerInsensitive() {
    // Login as our privileged user.
    $this->drupalLogin($this->admin);

    $question_node = $this->testCreateQuizQuestion(array(
      'correct_answer_evaluation' => ShortAnswerQuestion::ANSWER_INSENSITIVE_MATCH,
      'correct_answer' => 'the Zero One Infinity rule',
    ));
    $quiz_node = $this->linkQuestionToQuiz($question_node);

    // Test incorrect.
    $this->drupalGet("node/$quiz_node->nid/take");
    $this->drupalPost(NULL, array(
      "question[$question_node->nid]" => 'This is an incorrect answer.',
      ), t('Finish'));
    $this->assertText('Your score: 0%');

    // Test correct.
    $this->drupalGet("node/$quiz_node->nid/take");
    $this->drupalPost(NULL, array(
      "question[$question_node->nid]" => 'the Zero One Infinity rule',
      ), t('Finish'));
    $this->assertText('Your score: 100%');

    // Test correct.
    $this->drupalGet("node/$quiz_node->nid/take");
    $this->drupalPost(NULL, array(
      "question[$question_node->nid]" => 'the zero one Infinity rule',
      ), t('Finish'));
    $this->assertText('Your score: 100%');
  }

  /**
   * Test case sensitive graded questions.
   */
  public function testGradeAnswerSensitive() {
    // Login as our privileged user.
    $this->drupalLogin($this->admin);

    $quiz_node = $this->drupalCreateQuiz(array(
      'review_options' => array('end' => array('score' => 'score')),
    ));

    $question_node = $this->testCreateQuizQuestion(array(
      'correct_answer_evaluation' => ShortAnswerQuestion::ANSWER_MATCH,
      'correct_answer' => 'the Zero One Infinity rule',
    ));
    $this->linkQuestionToQuiz($question_node, $quiz_node);

    // Test incorrect.
    $this->drupalGet("node/$quiz_node->nid/take");
    $this->drupalPost(NULL, array(
      "question[$question_node->nid]" => 'the zero one Infinity rule',
      ), t('Finish'));
    $this->assertText('Your score: 0%');

    // Test correct.
    $this->drupalGet("node/$quiz_node->nid/take");
    $this->drupalPost(NULL, array(
      "question[$question_node->nid]" => 'the Zero One Infinity rule',
      ), t('Finish'));
    $this->assertText('Your score: 100%');
  }

  /**
   * Test regex graded questions.
   */
  public function testGradeAnswerRegex() {
    $this->drupalLogin($this->admin);

    $quiz_node = $this->drupalCreateQuiz();

    $question_node = $this->testCreateQuizQuestion(array(
      'correct_answer_evaluation' => ShortAnswerQuestion::ANSWER_REGEX,
      'correct_answer' => '/Zero One Infinity/i',
    ));
    $this->linkQuestionToQuiz($question_node, $quiz_node);

    // Test incorrect.
    $this->drupalLogin($this->user);
    $this->drupalGet("node/$quiz_node->nid/take");
    $this->drupalPost(NULL, array(
      "question[$question_node->nid]" => 'um some rule, I forget',
      ), t('Finish'));
    $this->assertText('Your score: 0%');

    // Test correct.
    $this->drupalGet("node/$quiz_node->nid/take");
    $this->drupalPost(NULL, array(
      "question[$question_node->nid]" => 'the answer is the zero one infinity rule',
      ), t('Finish'));
    $this->assertText('Your score: 100%');
  }

  /**
   * Test manually graded questions.
   *
   * Note: we use two questions here to make sure the grading form is handled
   * correctly.
   */
  public function testGradeAnswerManualFeedback() {
    $this->drupalLogin($this->admin);

    $quiz_node = $this->drupalCreateQuiz();

    $question_node1 = $this->testCreateQuizQuestion(array(
      'correct_answer_evaluation' => ShortAnswerQuestion::ANSWER_MANUAL,
      'correct_answer' => 'the Zero One Infinity rule',
    ));
    $this->linkQuestionToQuiz($question_node1, $quiz_node);

    $question_node2 = $this->testCreateQuizQuestion(array(
      'correct_answer_evaluation' => ShortAnswerQuestion::ANSWER_MANUAL,
      'correct_answer' => 'The number two is ridiculous and cannot exist',
    ));
    $this->linkQuestionToQuiz($question_node2, $quiz_node);

    // Test correct.
    $this->drupalLogin($this->user);
    $this->drupalGet("node/$quiz_node->nid/take");
    $this->drupalPost(NULL, array(
      "question[$question_node1->nid]" => 'the answer is the zero one infinity rule',
      ), t('Next'));
    $this->drupalPost(NULL, array(
      "question[$question_node2->nid]" => 'the number two really is ridiculous',
      ), t('Finish'));
    $this->assertText('Your score: 0%');
    // Strange behavior - extra spaces in HTML.
    //$this->assertText('Score ? of 10');
    $this->assertText('This answer has not yet been scored.');
    $this->assertNoFieldByName('0[score]');
    $this->assertNoFieldByName('1[score]');
    $url_of_result = $this->getUrl();

    // Test grading the question.
    $this->drupalLogin($this->admin);
    $this->drupalGet($url_of_result);
    $this->assertFieldByName('0[score]');
    $this->assertFieldByName('1[score]');
    // Admin has to provide feedback.
    $this->drupalLogin($this->admin);
    $this->drupalGet($url_of_result);
    $this->drupalPost(NULL, array(
      "0[score]" => 2,
      "1[score]" => 3,
      "0[answer_feedback][value]" => 'Feedback for answer 1.',
      "1[answer_feedback][value]" => 'Feedback for answer 2.',
      "0[answer_feedback][format]" => 'filtered_html',
      "1[answer_feedback][format]" => 'filtered_html',
      ), t('Save Score'));
    $this->assertText('The scoring data you provided has been saved.');

    // Test the score is visible to the user.
    $this->drupalLogin($this->user);
    $this->drupalGet($url_of_result);
    $this->assertText('You got 5 of 10 possible points.');
    $this->assertText('Your score: 50%');
    // Strange behavior - extra spaces in HTML.
    //$this->assertText('Score 2 of 5');
    //$this->assertText('Score 3 of 5');
    $this->assertText('Feedback for answer 1.');
    $this->assertText('Feedback for answer 2.');
  }

  /**
   * Test adding and taking a truefalse question.
   */
  function testCreateQuizQuestion($settings = NULL) {
    if (!$settings) {
      $settings = array(
        'correct_answer_evaluation' => ShortAnswerQuestion::ANSWER_INSENSITIVE_MATCH,
        'correct_answer' => 'SA 1 correct answer.',
      );
    }

    // Login as our privileged user.
    $this->drupalLogin($this->admin);

    $question_node = $this->drupalCreateNode(array(
      'type' => $this->question_node_type,
      'title' => 'SA 1 title',
      'body' => array(LANGUAGE_NONE => array(array('value' => 'SA 1 body text.'))),
      ) + $settings);

    return $question_node;
  }

}
